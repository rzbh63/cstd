
  
#ifndef _QUANTIZE_H 
#define _QUANTIZE_H 
 
#include <vector> 
using namespace std; 
 
#define SAFE_DELETE(x) if(x){ delete x; x=0;} 
 
 
//???????? 
typedef   struct   rgb   
{  
	BYTE   Red;   //   ?????????(???¦¶?0-255) 	   
	BYTE   Green;   //   ?????????(???¦¶?0-255)   
	BYTE   Blue;//   ?????????(???¦¶?0-255)	      
} RGB;   
 
 
//???????????? 
struct SOctant 
{ 
	SOctant		*m_pParent;       //????? 
	SOctant		*m_pChildren[8];  //???8?????? 
	int			m_iRefCount;      //??????????????????????????????????????? 
	int			m_iRed;           //????????? 
	int			m_iGreen;         //????????? 
	int			m_iBlue;          //????????? 
	int			m_iPalIndex;      //??????????????§Ö????? 
	SOctant() 
	{ 
		memset( this, 0, sizeof( SOctant ));//??????????????????0 
	} 
	~SOctant() 
	{ 
		for( int i=0; i<8; i++ ) 
			SAFE_DELETE( m_pChildren[i] ); 
		m_pParent = 0; 
	} 
	BOOL IsLeaf()//?§Ø?????????? 
	{ 
		SOctant *pChildren[8]={0};   //?????????????????????ï…?????? 0 = NULL 
		if( !memcmp(pChildren, m_pChildren, sizeof(pChildren) ) )  //??????????????????§³????????0 
			return true; 
		else return false; 
	} 
 
	BOOL IsRev2ndLevel(); 
 
	void SumChildren() 
	{ 
		for(int i=0;i<8;i++) 
			if( m_pChildren[i] ) 
			{ 
				m_iRefCount += m_pChildren[i]->m_iRefCount; 
				m_iRed += m_pChildren[i]->m_iRed; 
				m_iGreen += m_pChildren[i]->m_iGreen; 
				m_iBlue += m_pChildren[i]->m_iBlue; 
			} 
	} 
}; 
 
class OctreeQuantize 
{ 
public: 
	SOctant		*m_pOctantRoot;     //?????????????? 
    RGB         *m_pPal;            //??????????? 
	BYTE		*m_pbyIndexedImg;  //?????????????????????????? 
protected: 
	int			m_iPalIndex;       //?????????? 
	int			m_iNumColors;      //???????? 
	vector<SOctant*> m_vRev2ndLevelOctants; 
 
public: 
	void Chg16bitTo256( BYTE *pwImgBuf, int width, int height, int pitch );//WORD *pwImgBuf?????BYTE *pwImgBuf 
	void MapImgTo256( BYTE *pwImgBuf, int width, int height, int  pitch );//WORD *pwImgBuf?????BYTE *pwImgBuf 
	OctreeQuantize(); 
	~OctreeQuantize(); 
protected: 
	void BuildPal(); 
	void BuildPalIt(SOctant *pOctant ); 
	void GetDescendant( SOctant *pCurOctant, BOOL bTranverseChild = true ); 
	void ReduceTo256(); 
	void BuildOctree( BYTE *pwImgBuf, int width, int height, int pitch );//WORD *pwImgBuf?????BYTE *pwImgBuf 
	void BuildRev2ndLevelVector(SOctant *pOctant); 
}; 
 
 
#endif

 