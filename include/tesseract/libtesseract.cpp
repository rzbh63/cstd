
#ifdef _WIN32
#pragma comment(lib, "icuuc.lib")
#endif

//#define register

#include "leptonica/libleptonica.cpp"

#define HAVE_CONFIG_H
#define VERSION_MAJOR "4.0"
#define VERSION_MINOR "4.0"
#define WINDLLNAME  "libtesseract.dll"


#include "config_auto.h"


// app
#include "altorenderer.cpp"
#include "baseapi.cpp"
#include "capi.cpp"
#include "hocrrenderer.cpp"
#include "pdfrenderer.cpp"
#include "renderer.cpp"
//#include "tesseractmain.cpp"
// arch
#include "dotproduct.cpp"
#include "dotproductavx.cpp"
#include "dotproductsse.cpp"
#include "intsimdmatrix.cpp"
#include "intsimdmatrixavx2.cpp"
#include "intsimdmatrixsse.cpp"
#include "simddetect.cpp"
//ccmain
#include "adaptions.cpp"
#include "applybox.cpp"
#include "control.cpp"
#include "docqual.cpp"
#include "equationdetect.cpp"
#include "fixspace.cpp"
#include "fixxht.cpp"
#include "linerec.cpp"
#include "ltrresultiterator.cpp"
#include "mutableiterator.cpp"
#include "osdetect.cpp"
#include "output.cpp"
#include "pageiterator.cpp"
#include "pagesegmain.cpp"
#include "pagewalk.cpp"
#include "paragraphs.cpp"
#include "paramsd.cpp"
#include "par_control.cpp"
#include "pgedit.cpp"
#include "recogtraining.cpp"
#include "reject.cpp"
#include "resultiterator.cpp"
#include "superscript.cpp"
#include "tessbox.cpp"
#include "tessedit.cpp"
#include "tesseractclass.cpp"
#include "tessvars.cpp"
#include "tfacepp.cpp"
#include "thresholder.cpp"
#include "werdit.cpp"
//ccstruct
#include "blamer.cpp"
#include "blobbox.cpp"
#include "blobs.cpp"
#include "blread.cpp"
#include "boxread.cpp"
#include "boxword.cpp"
#include "ccstruct.cpp"
#include "coutln.cpp"
#include "detlinefit.cpp"
#include "dppoint.cpp"
#include "fontinfo.cpp"
#include "imagedata.cpp"
#include "linlsq.cpp"
#include "matrix.cpp"
#include "mod128.cpp"
#include "normalis.cpp"
#include "ocrblock.cpp"
#include "ocrpara.cpp"
#include "ocrrow.cpp"
#include "otsuthr.cpp"
#include "pageres.cpp"
#include "params_training_featdef.cpp"
#include "pdblock.cpp"
#include "points.cpp"
#include "polyaprx.cpp"
#include "polyblk.cpp"
#include "publictypes.cpp"
#include "quadlsq.cpp"
#include "quspline.cpp"
#include "ratngs.cpp"
#include "rect.cpp"
#include "rejctmap.cpp"
#include "seam.cpp"
#include "split.cpp"
#include "statistc.cpp"
#include "stepblob.cpp"
#include "vecfuncs.cpp"
#include "werd.cpp"
// ccutil
#include "ambigs.cpp"
#include "basedir.cpp"
#include "bitvector.cpp"
#include "ccutil.cpp"
#include "clst.cpp"
#include "elst.cpp"
#include "elst2.cpp"
#include "errcode.cpp"
#include "fileio.cpp"
#include "globaloc.cpp"
#include "indexmapbidi.cpp"
#include "mainblk.cpp"
#include "params.cpp"
#include "scanutils.cpp"
#include "serialis.cpp"
#include "strngs.cpp"
#include "tessdatamanager.cpp"
#include "tprintf.cpp"
#include "unichar.cpp"
#include "unicharcompress.cpp"
#include "unicharmap.cpp"
#include "unicharset.cpp"
#include "unicodes.cpp"
#include "universalambigs.cpp"
//classify
#include "adaptive.cpp"
#include "adaptmatch.cpp"
#include "blobclass.cpp"
#include "classify.cpp"
#include "cluster.cpp"
#include "clusttool.cpp"
#include "cutoffs.cpp"
#include "errorcounter.cpp"
#include "featdefs.cpp"
#include "float2int.cpp"
#include "fpoint.cpp"
#include "intfeaturedist.cpp"
#include "intfeaturemap.cpp"
#include "intfeaturespace.cpp"
#include "intfx.cpp"
#include "intmatcher.cpp"
#include "intproto.cpp"
#include "kdtree.cpp"
#include "mastertrainer.cpp"
#include "mf.cpp"
#include "mfdefs.cpp"
#include "mfoutline.cpp"
#include "mfx.cpp"
#include "normfeat.cpp"
#include "normmatch.cpp"
#include "ocrfeatures.cpp"
#include "outfeat.cpp"
#include "picofeat.cpp"
#include "protos.cpp"
#include "sampleiterator.cpp"
#include "shapeclassifier.cpp"
#include "shapetable.cpp"
#include "tessclassifier.cpp"
#include "trainingsample.cpp"
#include "trainingsampleset.cpp"
// cutil
#include "bitvec.cpp"
#include "callcpp.cpp"
#include "cutil_class.cpp"
#include "emalloc.cpp"
#include "oldlist.cpp"
#include "structures.cpp"
//dict
#include "context.cpp"
#include "dawg.cpp"
#include "dawg_cache.cpp"
#include "dict.cpp"
#include "hyphen.cpp"
#include "permdawg.cpp"
#include "stopper.cpp"
#include "trie.cpp"
// lstm
#include "convolve.cpp"
#include "ctc.cpp"
#include "fullyconnected.cpp"
#include "functions.cpp"
#include "input.cpp"
#include "lstm.cpp"
#include "lstmrecognizer.cpp"
#include "lstmtrainer.cpp"
#include "maxpool.cpp"
#include "network.cpp"
#include "networkbuilder.cpp"
#include "networkio.cpp"
#include "parallel.cpp"
#include "plumbing.cpp"
#include "recodebeam.cpp"
#include "reconfig.cpp"
#include "reversed.cpp"
#include "series.cpp"
#include "stridemap.cpp"
#include "tfnetwork.cpp"
#include "weightmatrix.cpp"
// opencl
#include "openclwrapper.cpp"
// textord
#include "alignedblob.cpp"
#include "baselinedetect.cpp"
#include "bbgrid.cpp"
#include "blkocc.cpp"
#include "blobgrid.cpp"
#include "ccnontextdetect.cpp"
#include "cjkpitch.cpp"
#include "colfind.cpp"
#include "colpartition.cpp"
#include "colpartitiongrid.cpp"
#include "colpartitionset.cpp"
#include "devanagari_processing.cpp"
#include "drawedg.cpp"
#include "drawtord.cpp"
#include "edgblob.cpp"
#include "edgloop.cpp"
#include "equationdetectbase.cpp"
#include "fpchop.cpp"
#include "gap_map.cpp"
#include "imagefind.cpp"
#include "linefind.cpp"
#include "makerow.cpp"
#include "oldbasel.cpp"
#include "pithsync.cpp"
#include "pitsync1.cpp"
#include "scanedg.cpp"
#include "sortflts.cpp"
#include "strokewidth.cpp"
#include "tabfind.cpp"
#include "tablefind.cpp"
#include "tablerecog.cpp"
#include "tabvector.cpp"
#include "textlineprojection.cpp"
#include "textord.cpp"
#include "topitch.cpp"
#include "tordmain.cpp"
#include "tospace.cpp"
#include "tovars.cpp"
#include "underlin.cpp"
#include "wordseg.cpp"
#include "workingpartset.cpp"
//viewer
#include "scrollview.cpp"
#include "svmnode.cpp"
//#include "svpaint.cpp"
#include "svutil.cpp"

//wordrec
#include "associate.cpp"
#include "chop.cpp"
#include "chopper.cpp"
#include "drawfx.cpp"
#include "findseam.cpp"
#include "gradechop.cpp"
#include "language_model.cpp"
#include "lm_consistency.cpp"
#include "lm_pain_points.cpp"
#include "lm_state.cpp"
#include "outlines.cpp"
#include "params_model.cpp"
#include "pieces.cpp"
#include "plotedges.cpp"
#include "render.cpp"
#include "segsearch.cpp"
#include "tface.cpp"
#include "wordclass.cpp"
#include "wordrec.cpp"
#if 0
// training
//#include "ambiguous_words.cpp"
#include "boxchar.cpp"
//#include "classifier_tester.cpp"
//#include "cntraining.cpp"
//#include "combine_lang_model.cpp"
//#include "combine_tessdata.cpp"
#include "commandlineflags.cpp"
#include "commontraining.cpp"
#include "dawg2wordlist.cpp"
#include "degradeimage.cpp"
#include "icuerrorcode.cpp"
#include "lang_model_helpers.cpp"
#include "ligature_table.cpp"
#include "lstmeval.cpp"
#include "lstmtester.cpp"
#include "lstmtraining.cpp"
#include "mergenf.cpp"
#include "merge_unicharsets.cpp"
#include "mftraining.cpp"
#include "normstrngs.cpp"
#include "pango_font_info.cpp"
#include "set_unicharset_properties.cpp"
#include "shapeclustering.cpp"
#include "stringrenderer.cpp"
#include "tessopt.cpp"
#include "text2image.cpp"
#include "tlog.cpp"
#include "unicharset_extractor.cpp"
#include "unicharset_training_utils.cpp"
#include "validate_grapheme.cpp"
#include "validate_indic.cpp"
#include "validate_javanese.cpp"
#include "validate_khmer.cpp"
#include "validate_myanmar.cpp"
#include "validator.cpp"
#include "wordlist2dawg.cpp"

#endif

